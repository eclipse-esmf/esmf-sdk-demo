<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <groupId>org.example</groupId>
   <artifactId>esmf-sdk-demo</artifactId>
   <version>1.0-SNAPSHOT</version>

   <properties>
      <!-- General settings -->
      <maven.compiler.source>21</maven.compiler.source>
      <maven.compiler.target>21</maven.compiler.target>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <generated-sources>${project.basedir}/src-gen</generated-sources>

      <!-- Regular dependencies -->
      <esmf-sdk.version>2.10.1</esmf-sdk.version>

      <!-- Test dependencies -->
      <assertj-core.version>3.27.3</assertj-core.version>
      <junit-jupiter.version>5.12.1</junit-jupiter.version>
      <wiremock.version>3.12.1</wiremock.version>

      <!-- Plugin versions -->
      <build-helper-maven-plugin.version>3.6.0</build-helper-maven-plugin.version>
      <maven-clean-plugin.version>3.4.1</maven-clean-plugin.version>
      <maven-scm-plugin.version>2.1.0</maven-scm-plugin.version>
      <openapi-generator-maven-plugin.version>7.12.0</openapi-generator-maven-plugin.version>
      <versions-maven-plugin.version>2.18.0</versions-maven-plugin.version>
   </properties>

   <dependencies>
      <!-- Regular dependencies -->
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>esmf-aspect-model-starter</artifactId>
         <version>${esmf-sdk.version}</version>
      </dependency>
      <dependency>
         <groupId>org.eclipse.esmf</groupId>
         <artifactId>esmf-aspect-meta-model-java</artifactId>
         <version>${esmf-sdk.version}</version>
      </dependency>

      <!-- Runtime dependencies needed for the code generated by the openapi-generator with java-wiremock template -->
      <dependency>
         <groupId>org.wiremock</groupId>
         <artifactId>wiremock</artifactId>
         <version>${wiremock.version}</version>
      </dependency>

      <!-- Test dependencies -->
      <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter</artifactId>
         <version>${junit-jupiter.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.assertj</groupId>
         <artifactId>assertj-core</artifactId>
         <version>${assertj-core.version}</version>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <build>
      <plugins>
         <!-- This plugin will clone the CatenaX Aspect Models -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-scm-plugin</artifactId>
            <version>${maven-scm-plugin.version}</version>
            <executions>
               <execution>
                  <id>clone-sldt-semantic-models</id>
                  <phase>initialize</phase>
                  <goals>
                     <goal>checkout</goal>
                  </goals>
                  <configuration>
                     <connectionUrl>scm:git:https://github.com/eclipse-tractusx/sldt-semantic-models.git</connectionUrl>
                     <checkoutDirectory>${project.basedir}/sldt-semantic-models</checkoutDirectory>
                     <scmVersionType>tag</scmVersionType>
                     <scmVersion>v24.05</scmVersion>
                     <skipCheckoutIfExists>true</skipCheckoutIfExists>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <!-- Configures versions plugin to ignore alpha/beta/milestone versions when running mvn versions:display-property-updates -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>versions-maven-plugin</artifactId>
            <version>${versions-maven-plugin.version}</version>
            <configuration>
               <ignoredVersions>.*[\.-](?i)(alpha|beta|(rc[0-9]+)|(m\d+)).*</ignoredVersions>
            </configuration>
         </plugin>

         <!-- Generates artifacts for Aspect Models -->
         <plugin>
            <groupId>org.eclipse.esmf</groupId>
            <artifactId>esmf-aspect-model-maven-plugin</artifactId>
            <version>${esmf-sdk.version}</version>
            <configuration>
               <modelsRootDirectory>${project.basedir}/sldt-semantic-models</modelsRootDirectory>
               <outputDirectory>${generated-sources}/main/java</outputDirectory>
               <detailedValidationMessages>true</detailedValidationMessages>
               <includes>
                  <include>urn:samm:io.catenax.part_as_planned:2.0.0#PartAsPlanned</include>
               </includes>
            </configuration>

            <executions>
               <!-- Validate loaded Aspect Model -->
               <execution>
                  <id>validate</id>
                  <phase>generate-sources</phase>
                  <goals>
                     <goal>validate</goal>
                  </goals>
               </execution>

               <!-- Generate regular Java classes (POJO) -->
               <execution>
                  <id>generate-java-classes</id>
                  <phase>generate-sources</phase>
                  <goals>
                     <goal>generateJavaClasses</goal>
                  </goals>
                  <configuration>
                     <packageName>io.catenax.part_as_planned</packageName>
                  </configuration>
               </execution>

               <!-- Generate Static (meta) classes -->
               <execution>
                  <id>generate-static-java-classes</id>
                  <phase>generate-sources</phase>
                  <goals>
                     <goal>generateStaticJavaClasses</goal>
                  </goals>
                  <configuration>
                     <packageName>io.catenax.part_as_planned</packageName>
                  </configuration>
               </execution>

               <execution>
                  <id>generate-openapi-spec</id>
                  <!-- Run it at generate-sources so that it happens before execution of the openapi-generator-maven-plugin -->
                  <phase>generate-sources</phase>
                  <goals>
                     <goal>generateOpenApiSpec</goal>
                  </goals>
                  <configuration>
                     <aspectApiBaseUrl>http://example.com</aspectApiBaseUrl>
                     <aspectResourcePath>/part-as-planned</aspectResourcePath>
                     <outputDirectory>${generated-sources}/main/resources</outputDirectory>
                     <outputFormat>yaml</outputFormat>
                     <excludePaging>true</excludePaging>
                  </configuration>
               </execution>

               <execution>
                  <id>generate-json-schema</id>
                  <phase>generate-resources</phase>
                  <goals>
                     <goal>generateJsonSchema</goal>
                  </goals>
                  <configuration>
                     <outputDirectory>${generated-sources}/main/resources</outputDirectory>
                     <language>en</language>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.openapitools</groupId>
            <artifactId>openapi-generator-maven-plugin</artifactId>
            <version>${openapi-generator-maven-plugin.version}</version>
            <configuration>
               <output>${generated-sources}</output>
            </configuration>
            <executions>
               <execution>
                  <id>generate-implementation-from-openapi</id>
                  <!-- Run it at generate-sources so that it happens after execution of the OpenAPI spec generation -->
                  <phase>generate-resources</phase>
                  <goals>
                     <goal>generate</goal>
                  </goals>
                  <configuration>
                     <inputSpec>${generated-sources}/main/resources/PartAsPlanned.oai.yaml</inputSpec>
                     <!-- Change this to whatever you need -->
                     <generatorName>java-wiremock</generatorName>
                     <configOptions>
                        <sourceFolder>main/java</sourceFolder>
                     </configOptions>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <!-- Adds the src-gen folder (where generated Java Code will end up) as part of the sources -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>${build-helper-maven-plugin.version}</version>
            <executions>
               <execution>
                  <id>add-source</id>
                  <phase>initialize</phase>
                  <goals>
                     <goal>add-source</goal>
                  </goals>
                  <configuration>
                     <sources>
                        <source>${generated-sources}/main/java</source>
                     </sources>
                  </configuration>
               </execution>
               <execution>
                  <id>add-resource</id>
                  <phase>initialize</phase>
                  <goals>
                     <goal>add-resource</goal>
                  </goals>
                  <configuration>
                     <resources>
                        <resource>
                           <directory>${generated-sources}/main/resources</directory>
                        </resource>
                     </resources>
                  </configuration>
               </execution>

            </executions>
         </plugin>

         <!-- Configures mvn clean to also clean up generated sources -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-clean-plugin</artifactId>
            <version>${maven-clean-plugin.version}</version>
            <configuration>
               <filesets>
                  <fileset>
                     <directory>${generated-sources}</directory>
                  </fileset>
               </filesets>
            </configuration>
         </plugin>
      </plugins>
   </build>

</project>
